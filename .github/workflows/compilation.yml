name: GitHub Actions Arcade
run-name: ${{ github.actor }} is using GitHub Actions ðŸš€
on: [push]

jobs:
  Repository-Undesired-Files-Check:
    name: Check for undesired files (temp, binary, valgrind, cmake files, etc...)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Scan files
      run: |
        arr=($(find . \( -name "#*#" -o -name "*~" \
        -o -name "*.o" -o -name "*.a" \
        -o -name "*.so" -o -name "*.gcno" -o -name "*.gcda" -o -name "*.gcov" \
         -o -path '*tmp/*' \)))
        for i in ${arr[@]}; do echo "::error file=$i,line=1,endLine=1,title=Unwanted file detected::$i"; done
        if ((${#arr[@]})); then
          exit 1
        fi

  Push-From-Mirroring-To-Target-Repository:
    name: Push from mirroring to target repository
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: Project-Compilation
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v3
        with:
          target_repo_url:
            git@github.com:EpitechPromo2026/B-OOP-400-BDX-4-1-arcade-leopold.sallan-gemard.git
          ssh_private_key:
            ${{ secrets.SSH_PRIVATE_KEY }}

  Project-Compilation:
    name: Compilation of the project via CMake
    runs-on: ubuntu-latest
    needs: Repository-Undesired-Files-Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}}

  # Units-Tests:
  #   name: Unit tests and coverage
  #   runs-on: ubuntu-latest
  #   needs: Project-Compilation
  #   container:
  #     image: epitechcontent/epitest-docker:latest
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       fetch-depth: 0

  # Dependencies-Installation:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Install Dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y cmake
  #         # Add other dependencies here

  # Coding-Style-Checker:
  # name: Coding style check
  # runs-on: ubuntu-latest
  # steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v3
  #   - name: Get banana script
  #     run: curl https://raw.githubusercontent.com/Epitech/coding-style-checker/main/coding-style.sh -o /tmp/coding-style.sh; chmod +x /tmp/coding-style.sh
  #   - name: Run coding-style.sh
  #     run: /tmp/coding-style.sh . .
  #   - name: Display banana report
  #     run: cat coding-style-reports.log
  #   - name: Report banana result
  #     run: |
  #       NB_ERROR=$(cat coding-style-reports.log | wc -l)
  #       if [ $NB_ERROR -gt 0 ]; then
  #           ERRORS=$(cat coding-style-reports.log);
  #           echo "Banana found $NB_ERROR error(s)"
  #           echo "$ERRORS"
  #           if [ $NB_ERROR -gt 1 ]; then
  #               echo "Too many errors, please fix them before submitting your work"
  #               exit 1
  #           fi
  #           exit 0
  #       fi
  #       echo "Everything is good ! Keep on coding !"
  #       exit 0